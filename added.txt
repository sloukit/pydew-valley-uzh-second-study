+from typing import Final, List
+__all__: Final[List[str]] = ["Camera", "CameraTarget", "Quaker", "ZoomArea", "ZoomManager"]
+from typing import Final, Mapping
+_DIRECTIONAL_VECTORS: Final[Mapping[Direction, pygame.Vector2]] = MappingProxyType(
+_DIRSWAP_DELAY: Final[float] = 0.03
+from typing import Callable, Final, Dict
+BAD_API_KEY: Final[str] = "9"
+PLAY_TOKEN: Final[str] = "321"
+BAD_PLAY_TOKEN_1: Final[str] = "9"
+BAD_PLAY_TOKEN_2: Final[str] = "zzz"
+DUMMY_TELEMETRY_DATA: Final[Dict[str, str]] = {"self_assessment": "ok"}
+from typing import Final, Tuple
+SL_ORANGE_BRIGHTEST: Final[Tuple[int, int, int]] = (243, 229, 194)  # #f3e5c2  UI Text, Highlights, bright Background
+SL_ORANGE_BRIGHTER: Final[Tuple[int, int, int]] = (232, 207, 166)  # #e8cfa6  Volume Slider knob
+SL_ORANGE_BRIGHT: Final[Tuple[int, int, int]] = (220, 185, 138)  # #c49a6c  UI Background, bright Border
+SL_ORANGE_MEDIUM: Final[Tuple[int, int, int]] = (196, 154, 108)  # #b68962  UI Button
+SL_ORANGE_DARK: Final[Tuple[int, int, int]] = (170, 121, 89)  # #aa7959  UI Border
+SL_ORANGE_DARKER: Final[Tuple[int, int, int]] = (144, 98, 93)  # #90625d  UI Border Shadow
+SL_ORANGE_DARKEST: Final[Tuple[int, int, int]] = (117, 76, 96)  # #754c60
+SL_CUSTOM_WHITE: Final[Tuple[int, int, int]] = (255, 255, 255)  # #754c60
+SL_BROWN_DARK: Final[Tuple[int, int, int]] = (140, 115, 105)  # #8c7369
+SL_BROWN_DARKER: Final[Tuple[int, int, int]] = (123, 103, 98)  # #7b6762
+SL_BROWN_DARKEST: Final[Tuple[int, int, int]] = (100, 85, 82)  # #645552
+from typing import Final, Tuple
+    _SERIALISABLE_STRINGS: Final[Tuple[str, ...]] = nonmember(
+    _ITEM_WORTHS: Final[Tuple[int, ...]] = nonmember(
+    _SERIALISABLE_STRINGS: Final[Tuple[str, ...]] = nonmember(
+    _AS_IRS: Final[Tuple[int]] = nonmember(
+    _AS_NS_IRS: Final[Tuple[int]] = nonmember(
+    _AS_FTS: Final[Tuple[int, ...]] = nonmember(
+    _AS_IRS: Final[Tuple[int, ...]] = nonmember(
+    _AS_NS_IRS: Final[Tuple[int, ...]] = nonmember(
+_OPPOSITES: Final[Tuple[Direction, ...]] = (
+from typing import NoReturn, Self, Type, Union, Final
+OPEN_INVENTORY: Final[int] = create_custom_event_type("OpenInventory")
+DIALOG_SHOW: Final[int] = create_custom_event_type("DIALOG_SHOW", dial=str, is_gvt=bool | None)
+DIALOG_ADVANCE: Final[int] = create_custom_event_type("DIALOG_ADVANCE")
+SHOW_BOX_KEYBINDINGS: Final[int] = create_custom_event_type("SHOW_BOX_KEYBINDINGS")
+SHOW_BATH_INFO: Final[int] = create_custom_event_type("SHOW_BATH_INFO")
+START_QUAKE: Final[int] = create_custom_event_type("StartQuake", duration=float, debug=bool)
+VOLCANO_ERUPTION: Final[int] = create_custom_event_type("VolcanoEruption")
+SET_CURSOR: Final[int] = create_custom_event_type("SET_CURSOR", cursor=CustomCursor)
+    BLUR_FACTOR,
+                    (SCREEN_WIDTH // BLUR_FACTOR, SCREEN_HEIGHT // BLUR_FACTOR),
+from typing import Final
+_TWO_PI: Final[float] = PI * 2
+_HALF_PI: Final[float] = PI / 2
+from typing import Final, Tuple
+_SCREEN_CENTER: Final[Tuple[int, int]] = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
+from typing import Callable, Final
+NPC_POOL_SIZE: Final[int] = 12
+INGRP_IDS: Final[set[int]] = set(range(NPC_POOL_SIZE))
+OUTGRP_IDS: Final[set[int]] = set(range(NPC_POOL_SIZE, NPC_POOL_SIZE * 2))
+ADH_NPC_INGRP: Final[list[int]] = [
+_MAXIMUM_DEATH_COUNT: Final[int] = NPC_POOL_SIZE // 2
+_DEATH_LIKELIHOOD: Final[float] = 0.5  # per round, non-adhering have two dice rolls
+from typing import Final
+BLACK: Final[str] = "Black"
+RED: Final[str] = "Red"
+from typing import Final, Dict, Tuple
+        self.colors: Final[Dict[str, Tuple[int, int, int]]] = {
+        self.volcanic_color: Final[Tuple[int, int, int, int]] = (165, 124, 82, 100)
+from typing import Final, List
+__all__: Final[List[str]] = ["SaveFile"]
+from typing import Final, Tuple
+_NONSEED_INVENTORY_DEFAULT_AMOUNT: Final[int] = 20
+_SEED_INVENTORY_DEFAULT_AMOUNT: Final[int] = 5
+_INV_DEFAULT_AMOUNTS: Final[Tuple[int, int]] = (
+CONVERT_TO_FT: Final[str] = "__FarmingTool__"
+CONVERT_TO_IR: Final[str] = "__InventoryResource__"
+from typing import Callable, Any, Final, Tuple, Dict
+_EQUIP_BTN_CHECKMARK_FRECT_KWARGS: Final[Tuple[Dict[str, tuple[int, int]], Dict[str, tuple[int, int]]]] = ({"bottomright": (64, 64)}, {"bottomleft": (0, 64)})
+_SPACING_BETWEEN_ROWS: Final[int] = 20
+_TOP_MARGIN: Final[int] = 200
+_LEFT_MARGIN: Final[int] = 40
+_BUTTON_SIZE: Final[Tuple[int, int]] = (80, 80)
+from typing import Any, cast, Final, Tuple
+_TO_PLAYER_SPEED_INCREASE_THRESHOLD: Final[int] = 200
+_DECIDE_SEQUENCE: Final[Tuple[ScriptedSequence, ScriptedSequence]] = (
+_RESTRICT_NPC_SEQ: Final[Tuple[ScriptedSequence, ScriptedSequence, ScriptedSequence, ScriptedSequence]] = (
+_YES_OR_NO: Final[Tuple[str, str]] = ("checkmark", "cross")
+
+from typing import Any, Tuple, Final
+_SCREEN_CENTER: Final[Tuple[int, int]] = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
+MAX_TOKEN_LEN: Final[int] = 10
+MAX_PLAYERS_NAME_LEN: Final[int] = 16
+from typing import Final
+_NOTIFICATION_TXT_TOP: Final[int] = SCREEN_HEIGHT / 20 + 75
+_NOTIFICATION_TXT_CENTERX: Final[int] = SCREEN_WIDTH // 2
+from typing import Any, Final
+    SCROLL_AMOUNT: Final[int] = 10
+    MAX_SCROLL: Final[int] = 0
+from typing import Final, Tuple, Dict, List, Union, TypeAlias
+Coordinate: TypeAlias = tuple[int | float, int | float]
+SoundDict: TypeAlias = dict[str, pygame.mixer.Sound]
+MapDict: TypeAlias = dict[str, pytmx.TiledMap]
+AniFrames: TypeAlias = dict[str, list[pygame.Surface]]
+GogglesStatus: TypeAlias = bool | None
+NecklaceStatus: TypeAlias = bool | None
+HatStatus: TypeAlias = bool | None
+HornStatus: TypeAlias = bool | None
+OutgroupSkinStatus: TypeAlias = bool | None
+SCREEN_WIDTH: Final[int] = 1280
+SCREEN_HEIGHT: Final[int] = 720
+VOLCANO_SIZE: Final[int] = 500
+TILE_SIZE: Final[int] = 16
+CHAR_TILE_SIZE: Final[int] = 48
+SCALE_FACTOR: Final[int] = 4
+SCALED_TILE_SIZE: Final[int] = TILE_SIZE * SCALE_FACTOR
+RANDOM_SEED: Final[int] = 123456789
+# may possibly change, not marked as final
+GAME_MAP: TypeAlias = Map.NEW_FARM
+ENABLE_NPCS: Final[bool] = True
+TEST_ANIMALS: Final[bool] = True
+GAME_LANGUAGE: Final[str] = os.environ.get("GAME_LANGUAGE", "en")
+DEBUG_MODE_VERSION: Final[bool] = False
+USE_GAME_TIME: Final[bool] = False
+SECONDS_PER_GAME_MINUTE: Final[float] = 0.7
+WORLD_TIME_MULTIPLIER: Final[float] = 1.0
+# changes a few lines later, not marked as final
+POS_MIN_LOG_INTERVAL: Final[float] = 1
+POS_MOVE_LOG_INTERVAL: Final[float] = 15
+TOOLS_LOG_INTERVAL: Final[float] = 5
+WEB_SERVER_URL: Final[str] = "WEB_SERVER_URL_PLACEHOLDER"
+EMOTE_SIZE: Final[int] = 48
+SAM_BORDER_SIZE: Final[Tuple[int, int]] = (
+SIA_BORDER_SIZE: Final[Tuple[int, int]] = (
+GROW_SPEED: Final[Dict[str, float]] = {
+BASE_ALLOWED_CROPS: Final[List[str]] = [
+# Overlays
+OVERLAY_POSITIONS: Final[Dict[str, Tuple[Union[int, float], Union[int, float]]]] = {
+BLUR_FACTOR: Final[int] = 4 # blur overlay in groups.py; removed _ prefix since there is no getter/setter
+APPLE_POS: Final[Dict[str, List[Tuple[int, int]]]]  = {
+VOLCANO_POS: Final[Tuple[int, int]] = (640, 0)
+CHARS_PER_LINE: Final[int] = 45
+TB_SIZE: Final[Tuple[int, int]] = (491, 376)
+GVT_TB_SIZE: Final[Tuple[int, int]] = (607, 276)
+TUTORIAL_TB_LEFT: Final[int] = SCREEN_WIDTH - TB_SIZE[0]
+TUTORIAL_TB_TOP: Final[int] = SCREEN_HEIGHT / 1.5 - TB_SIZE[1]
+HEALTH_DECAY_VALUE: Final[float] = 0.01
+BATH_STATUS_TIMEOUT: Final[int] = 30
+DEFAULT_ANIMATION_NAME: Final[str] = "intro"
+EMOTES_LIST: Final[List[str]] = [
+TOMATO_OR_CORN_LIST: Final[List[str]] = [
+MAX_HP: Final[int] = 100
+SICK_INTERVAL: Final[int] = 60 * 5
+RECOVERY_INTERVAL: Final[int] = 60 * 5
+MIN_GOGGLE_TIME: Final[int] = 240  # time per each SICK INTERVAL for goggles to be effective
+SICK_DURATION: Final[int] = 240  # duration of sickness
+SICK_DECLINE: Final[int] = 120  # decline time of sickness
+SICK_INCLINE: Final[int] = SICK_DURATION - SICK_DECLINE  # incline time of sickness
+SICK_MIN_HP: Final[int] = 10  # min hp to go to
+BSICK_DURATION: Final[int] = 60  # duration of sickness
+BSICK_DECLINE: Final[int] = 30  # decline time of sickness
+BSICK_INCLINE: Final[int] = SICK_DURATION - SICK_DECLINE  # incline time of sickness
+BSICK_MIN_HP: Final[int] = 50  # min hp to go to
+PLAYER_HP_STR: Final[str] = "player_hp"
+PLAYER_IS_SICK_STR: Final[str] = "player_is_sick"
+PLAYER_IS_BSICK_STR: Final[str] = "player_is_bath_sick"
+PLAYER_HP_STATE_STR: Final[str] = "player_hp_state"
+from typing import Callable, Final, Dict, Tuple
+_SICKNESS_PROBABILITIES: Final[Dict[Tuple[bool, bool], Tuple[float, float]]] = {
+from typing import Final, List
+_ANGLE_STEP: Final[int] = 15
+_BUBBLE_WAVE_EXTENT: Final[int] = 20
+_shufflable_angles: Final[List[int]] = list(range(0, 180, 15))
+from typing import Any, Callable, Type, Final, Tuple
+_NONSEED_INVENTORY_DEFAULT_AMOUNT: Final[int] = 20
+_SEED_INVENTORY_DEFAULT_AMOUNT: Final[int] = 5
+_INV_DEFAULT_AMOUNTS: Final[Tuple[int, int]] = (
+from typing import Final, Dict
+TR: Final[Dict[str, str]] = load_translations()
+from typing import Any, Final, Callable
+        self.instructions: Final[dict[int, Callable]] = {
+
+from typing import IO, Protocol, TextIO, TypeVar, Union, Final
+_DOUBLE_SLASH: Final[str] = "//"
+URL: Final[str] = "https://oxpvhqou52.execute-api.eu-central-2.amazonaws.com/default/telemetry"
